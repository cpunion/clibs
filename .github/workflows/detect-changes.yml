name: Detect Package Changes

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.detect-changes.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for comparing changes

      - name: Detect changed directories with pkg.yaml
        id: detect-changes
        run: |
          # Determine the appropriate refs based on event type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, compare the PR base to the PR head
            FROM_REF="${{ github.event.pull_request.base.sha }}"
            TO_REF="${{ github.event.pull_request.head.sha }}"
          else
            # For pushes, use the before and after commit SHAs
            FROM_REF="${{ github.event.before }}"
            TO_REF="${{ github.event.after }}"
          fi

          # Run the detection script
          chmod +x .github/scripts/detect-changes.sh
          .github/scripts/detect-changes.sh "$FROM_REF" "$TO_REF"

      - name: Set matrix
        id: set-matrix
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          # Create a JSON array from the space-separated list
          DIRS="${{ steps.detect-changes.outputs.CHANGED_DIRS }}"
          # Clean up any newlines and create a proper JSON array
          DIRS_CLEAN=$(echo "$DIRS" | tr '\n' ' ' | xargs)
          JSON_ARRAY=$(echo "$DIRS_CLEAN" | jq -R -c 'split(" ")')
          echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT
          echo "Generated matrix: $JSON_ARRAY"

      - name: List changed directories
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          echo "The following directories have changes and need to be rebuilt:"
          for dir in ${{ steps.detect-changes.outputs.CHANGED_DIRS }}; do
            echo "- $dir"
          done

  build-packages:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Install llgo_clibs
        working-directory: build
        run: go install ./cmd/llgo_clibs

      - name: Build package ${{ matrix.package }}
        run: |
          echo "Building package ${{ matrix.package }} for ${{ matrix.os }}/${{ matrix.arch }}"
          cd "${{ matrix.package }}"
          llgo_clibs prebuild

      - name: Build package ${{ matrix.package }} for wasip1
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        run: |
          echo "Building wasip1 for ${{ matrix.os }}/${{ matrix.arch }}"
          cd "${{ matrix.package }}"
          GOOS=wasip1 GOARCH=wasm llgo_clibs prebuild

  summarize:
    needs: [detect-changes, build-packages]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Summarize build results
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "Build status: ${{ needs.build-packages.result }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-packages.result }}" == "success" ]]; then
            echo " All packages built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo " Some packages failed to build" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Changed packages:" >> $GITHUB_STEP_SUMMARY
          for dir in ${{ fromJson(needs.detect-changes.outputs.matrix) }}; do
            echo "- $dir" >> $GITHUB_STEP_SUMMARY
          done

          echo "### Build Matrix:" >> $GITHUB_STEP_SUMMARY
          echo "- Operating Systems: Ubuntu Linux, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- Architectures: AMD64, ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- Special targets: WASI/WebAssembly" >> $GITHUB_STEP_SUMMARY
